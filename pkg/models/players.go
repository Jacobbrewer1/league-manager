// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

// players represents a row from 'players'.
type players struct {
	id        int       `db:"id,autoinc,pk"`
	firstName string    `db:"first_name"`
	lastName  string    `db:"last_name"`
	email     string    `db:"email"`
	dob       time.Time `db:"dob"`
	updatedAt time.Time `db:"updated_at"`
}

// playersColumns is the sorted column names for the type players
var playersColumns = []string{"dob", "email", "firstName", "id", "lastName", "updatedAt"}

// Insert inserts the players to the database.
func (m *players) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_players"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO players (" +
		"`first_name`, `last_name`, `email`, `dob`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.firstName, m.lastName, m.email, m.dob, m.updatedAt)
	res, err := db.Exec(sqlstr, m.firstName, m.lastName, m.email, m.dob, m.updatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.id = int(id)
	return nil
}

func InsertManyplayerss(db DB, ms ...*players) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_players"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO players (" +
		"`first_name`,`last_name`,`email`,`dob`,`updated_at`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?,?" +
			"),"
		args = append(args, m.firstName, m.lastName, m.email, m.dob, m.updatedAt)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *players) IsPrimaryKeySet() bool {
	return IsKeySet(m.id)
}

// Update updates the players in the database.
func (m *players) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_players"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE players " +
		"SET `first_name` = ?, `last_name` = ?, `email` = ?, `dob` = ?, `updated_at` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.firstName, m.lastName, m.email, m.dob, m.updatedAt, m.id)
	res, err := db.Exec(sqlstr, m.firstName, m.lastName, m.email, m.dob, m.updatedAt, m.id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the players to the database, and tries to update
// on unique constraint violations.
func (m *players) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_players"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO players (" +
		"`first_name`, `last_name`, `email`, `dob`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`first_name` = VALUES(`first_name`), `last_name` = VALUES(`last_name`), `email` = VALUES(`email`), `dob` = VALUES(`dob`), `updated_at` = VALUES(`updated_at`)"

	DBLog(sqlstr, m.firstName, m.lastName, m.email, m.dob, m.updatedAt)
	res, err := db.Exec(sqlstr, m.firstName, m.lastName, m.email, m.dob, m.updatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.id = int(id)
	return nil
}

// Save saves the players to the database.
func (m *players) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the players to the database, but tries to update
// on unique constraint violations.
func (m *players) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the players from the database.
func (m *players) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_players"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM players WHERE `id` = ?"

	DBLog(sqlstr, m.id)
	_, err := db.Exec(sqlstr, m.id)

	return err
}

// playersByid retrieves a row from 'players' as a players.
//
// Generated from primary key.
func playersByid(db DB, id int) (*players, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_players"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `first_name`, `last_name`, `email`, `dob`, `updated_at` " +
		"FROM players " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m players
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// playersByemail retrieves a row from 'players' as a *players.
//
// Generated from index 'players_email_uindex' of type 'unique'.
func playersByemail(db DB, email string) (*players, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_players"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `first_name`, `last_name`, `email`, `dob`, `updated_at` " +
		"FROM players " +
		"WHERE `email` = ?"

	DBLog(sqlstr, email)
	var m players
	if err := db.Get(&m, sqlstr, email); err != nil {
		return nil, err
	}

	return &m, nil
}
