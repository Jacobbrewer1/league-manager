// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/Jacobbrewer1/patcher"
	"github.com/Jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// Player represents a row from 'player'.
type Player struct {
	Id        int       `db:"id,autoinc,pk"`
	FirstName string    `db:"first_name"`
	LastName  string    `db:"last_name"`
	Email     string    `db:"email"`
	Dob       time.Time `db:"dob"`
	UpdatedAt time.Time `db:"updated_at"`
}

// Insert inserts the Player to the database.
func (m *Player) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Player"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO player (" +
		"`first_name`, `last_name`, `email`, `dob`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.FirstName, m.LastName, m.Email, m.Dob, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.FirstName, m.LastName, m.Email, m.Dob, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyPlayers(db DB, ms ...*Player) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Player"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("player")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Player) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Player in the database.
func (m *Player) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Player"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE player " +
		"SET `first_name` = ?, `last_name` = ?, `email` = ?, `dob` = ?, `updated_at` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.FirstName, m.LastName, m.Email, m.Dob, m.UpdatedAt, m.Id)
	res, err := db.Exec(sqlstr, m.FirstName, m.LastName, m.Email, m.Dob, m.UpdatedAt, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

func (m *Player) Patch(db DB, newT *Player) error {
	if newT == nil {
		return fmt.Errorf("new Player is nil")
	}

	res, err := patcher.NewDiffSQLPatch(m, newT, patcher.WithTable("player"))
	if err != nil {
		return fmt.Errorf("new diff sql patch: %w", err)
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("failed to create patch: %w", err)
		}
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// InsertWithUpdate inserts the Player to the database, and tries to update
// on unique constraint violations.
func (m *Player) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Player"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO player (" +
		"`first_name`, `last_name`, `email`, `dob`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`first_name` = VALUES(`first_name`), `last_name` = VALUES(`last_name`), `email` = VALUES(`email`), `dob` = VALUES(`dob`), `updated_at` = VALUES(`updated_at`)"

	DBLog(sqlstr, m.FirstName, m.LastName, m.Email, m.Dob, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.FirstName, m.LastName, m.Email, m.Dob, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Player to the database.
func (m *Player) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Player to the database, but tries to update
// on unique constraint violations.
func (m *Player) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Player from the database.
func (m *Player) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Player"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM player WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// PlayerById retrieves a row from 'player' as a Player.
//
// Generated from primary key.
func PlayerById(db DB, id int) (*Player, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Player"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `first_name`, `last_name`, `email`, `dob`, `updated_at` " +
		"FROM player " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Player
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// PlayerByEmail retrieves a row from 'player' as a *Player.
//
// Generated from index 'players_email_uindex' of type 'unique'.
func PlayerByEmail(db DB, email string) (*Player, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Player"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `first_name`, `last_name`, `email`, `dob`, `updated_at` " +
		"FROM player " +
		"WHERE `email` = ?"

	DBLog(sqlstr, email)
	var m Player
	if err := db.Get(&m, sqlstr, email); err != nil {
		return nil, err
	}

	return &m, nil
}
