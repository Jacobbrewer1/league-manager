{{- define "update" -}}
{{- $struct := .Name | structify -}}
// Update updates the {{ $struct }} in the database.
func (m *{{ $struct }}) Update(db DB) error {
    t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_{{ $struct | structify -}}"))
    defer t.ObserveDuration()

    {{ $cols := non_identity_columns . -}}
    {{- $wheres := identity_columns . -}}
    const sqlstr = "UPDATE {{ .Name }} " +
        "SET {{ range $i, $column := $cols }}{{ if $i }}, {{ end }}`{{ $column.Name }}` = ?{{ end }} " +
        "WHERE {{ range $i, $column := $wheres }}{{ if $i }} AND {{ end }}`{{ $column.Name }}` = ?{{ end }}"

    DBLog(sqlstr, {{ range $i, $column := $cols }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }}, {{ range $i, $column := $wheres }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }})
    res, err := db.Exec(sqlstr, {{ range $i, $column := $cols }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }}, {{ range $i, $column := $wheres }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }})
    if err != nil {
        return err
    }

    // Requires clientFoundRows=true
    if i, err := res.RowsAffected(); err != nil {
        return err
    } else if i <= 0 {
        return ErrNoAffectedRows
    }

    return nil
}
{{- end -}}