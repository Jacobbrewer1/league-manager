{{- define "update" -}}
{{- $struct := .Name | structify -}}
// Update updates the {{ $struct }} in the database.
func (m *{{ $struct }}) Update(db DB) error {
    t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_{{ $struct | structify -}}"))
    defer t.ObserveDuration()

    {{ $cols := non_identity_columns . -}}
    {{- $wheres := identity_columns . -}}
    const sqlstr = "UPDATE {{ .Name }} " +
        "SET {{ range $i, $column := $cols }}{{ if $i }}, {{ end }}`{{ $column.Name }}` = ?{{ end }} " +
        "WHERE {{ range $i, $column := $wheres }}{{ if $i }} AND {{ end }}`{{ $column.Name }}` = ?{{ end }}"

    DBLog(sqlstr, {{ range $i, $column := $cols }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }}, {{ range $i, $column := $wheres }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }})
    res, err := db.Exec(sqlstr, {{ range $i, $column := $cols }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }}, {{ range $i, $column := $wheres }}{{ if $i }}, {{ end }}m.{{ $column.Name | structify }}{{ end }})
    if err != nil {
        return err
    }

    // Requires clientFoundRows=true
    if i, err := res.RowsAffected(); err != nil {
        return err
    } else if i <= 0 {
        return ErrNoAffectedRows
    }

    return nil
}

func (m *{{ $struct }}) Patch(db DB, newT *{{ $struct }}) error {
    if newT == nil {
        return errors.New("new {{ .Name }} is nil")
    }

	res, err := patcher.NewDiffSQLPatch(m, newT, patcher.WithTable("{{ .Name }}"))
	if err != nil {
		return fmt.Errorf("new diff sql patch: %w", err)
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("failed to create patch: %w", err)
		}
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

{{- end -}}