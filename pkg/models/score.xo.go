// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"github.com/Jacobbrewer1/goschema/pkg/usql"
	"github.com/prometheus/client_golang/prometheus"
)

// Score represents a row from 'score'.
type Score struct {
	Id             int            `db:"id,autoinc,pk"`
	GameId         int            `db:"game_id"`
	PartnershipId  int            `db:"partnership_id"`
	FirstSetScore  int            `db:"first_set_score"`
	SecondSetScore int            `db:"second_set_score"`
	ThirdSetScore  usql.NullInt64 `db:"third_set_score"`
}

// Insert inserts the Score to the database.
func (m *Score) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Score"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO score (" +
		"`game_id`, `partnership_id`, `first_set_score`, `second_set_score`, `third_set_score`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.GameId, m.PartnershipId, m.FirstSetScore, m.SecondSetScore, m.ThirdSetScore)
	res, err := db.Exec(sqlstr, m.GameId, m.PartnershipId, m.FirstSetScore, m.SecondSetScore, m.ThirdSetScore)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyScores(db DB, ms ...*Score) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Score"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO score (" +
		"`game_id`,`partnership_id`,`first_set_score`,`second_set_score`,`third_set_score`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?,?" +
			"),"
		args = append(args, m.GameId, m.PartnershipId, m.FirstSetScore, m.SecondSetScore, m.ThirdSetScore)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Score) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Score in the database.
func (m *Score) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Score"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE score " +
		"SET `game_id` = ?, `partnership_id` = ?, `first_set_score` = ?, `second_set_score` = ?, `third_set_score` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.GameId, m.PartnershipId, m.FirstSetScore, m.SecondSetScore, m.ThirdSetScore, m.Id)
	res, err := db.Exec(sqlstr, m.GameId, m.PartnershipId, m.FirstSetScore, m.SecondSetScore, m.ThirdSetScore, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the Score to the database, and tries to update
// on unique constraint violations.
func (m *Score) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Score"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO score (" +
		"`game_id`, `partnership_id`, `first_set_score`, `second_set_score`, `third_set_score`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`game_id` = VALUES(`game_id`), `partnership_id` = VALUES(`partnership_id`), `first_set_score` = VALUES(`first_set_score`), `second_set_score` = VALUES(`second_set_score`), `third_set_score` = VALUES(`third_set_score`)"

	DBLog(sqlstr, m.GameId, m.PartnershipId, m.FirstSetScore, m.SecondSetScore, m.ThirdSetScore)
	res, err := db.Exec(sqlstr, m.GameId, m.PartnershipId, m.FirstSetScore, m.SecondSetScore, m.ThirdSetScore)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Score to the database.
func (m *Score) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Score to the database, but tries to update
// on unique constraint violations.
func (m *Score) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Score from the database.
func (m *Score) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Score"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM score WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// ScoreById retrieves a row from 'score' as a Score.
//
// Generated from primary key.
func ScoreById(db DB, id int) (*Score, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Score"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `game_id`, `partnership_id`, `first_set_score`, `second_set_score`, `third_set_score` " +
		"FROM score " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Score
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetGameIdGame Gets an instance of Game
//
// Generated from constraint score_games_id_fk
func (m *Score) GetGameIdGame(db DB) (*Game, error) {
	return GameById(db, m.GameId)
}

// GetPartnershipIdPartnership Gets an instance of Partnership
//
// Generated from constraint score_partnership_id_fk
func (m *Score) GetPartnershipIdPartnership(db DB) (*Partnership, error) {
	return PartnershipById(db, m.PartnershipId)
}
