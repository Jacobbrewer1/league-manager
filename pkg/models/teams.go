// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

// Teams represents a row from 'teams'.
type Teams struct {
	Id            int       `db:"id,autoinc,pk"`
	Name          string    `db:"name"`
	ContactEmail  string    `db:"contact_email"`
	ContactMobile string    `db:"contact_mobile"`
	UpdatedAt     time.Time `db:"updated_at"`
}

// Insert inserts the Teams to the database.
func (m *Teams) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Teams"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO teams (" +
		"`name`, `contact_email`, `contact_mobile`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyTeamss(db DB, ms ...*Teams) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Teams"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO teams (" +
		"`name`,`contact_email`,`contact_mobile`,`updated_at`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?" +
			"),"
		args = append(args, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Teams) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Teams in the database.
func (m *Teams) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Teams"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE teams " +
		"SET `name` = ?, `contact_email` = ?, `contact_mobile` = ?, `updated_at` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt, m.Id)
	res, err := db.Exec(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the Teams to the database, and tries to update
// on unique constraint violations.
func (m *Teams) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Teams"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO teams (" +
		"`name`, `contact_email`, `contact_mobile`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`name` = VALUES(`name`), `contact_email` = VALUES(`contact_email`), `contact_mobile` = VALUES(`contact_mobile`), `updated_at` = VALUES(`updated_at`)"

	DBLog(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Teams to the database.
func (m *Teams) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Teams to the database, but tries to update
// on unique constraint violations.
func (m *Teams) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Teams from the database.
func (m *Teams) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Teams"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM teams WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// TeamsById retrieves a row from 'teams' as a Teams.
//
// Generated from primary key.
func TeamsById(db DB, id int) (*Teams, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Teams"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `name`, `contact_email`, `contact_mobile`, `updated_at` " +
		"FROM teams " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Teams
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// TeamsByName retrieves a row from 'teams' as a *Teams.
//
// Generated from index 'teams_name_uindex' of type 'unique'.
func TeamsByName(db DB, name string) (*Teams, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Teams"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `name`, `contact_email`, `contact_mobile`, `updated_at` " +
		"FROM teams " +
		"WHERE `name` = ?"

	DBLog(sqlstr, name)
	var m Teams
	if err := db.Get(&m, sqlstr, name); err != nil {
		return nil, err
	}

	return &m, nil
}
