// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"fmt"
	"time"

	"github.com/Jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// Team represents a row from 'team'.
type Team struct {
	Id            int       `db:"id,autoinc,pk"`
	Name          string    `db:"name"`
	ContactEmail  string    `db:"contact_email"`
	ContactMobile string    `db:"contact_mobile"`
	UpdatedAt     time.Time `db:"updated_at"`
}

// Insert inserts the Team to the database.
func (m *Team) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Team"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO team (" +
		"`name`, `contact_email`, `contact_mobile`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyTeams(db DB, ms ...*Team) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Team"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("team")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Team) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Team in the database.
func (m *Team) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Team"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE team " +
		"SET `name` = ?, `contact_email` = ?, `contact_mobile` = ?, `updated_at` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt, m.Id)
	res, err := db.Exec(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the Team to the database, and tries to update
// on unique constraint violations.
func (m *Team) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Team"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO team (" +
		"`name`, `contact_email`, `contact_mobile`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`name` = VALUES(`name`), `contact_email` = VALUES(`contact_email`), `contact_mobile` = VALUES(`contact_mobile`), `updated_at` = VALUES(`updated_at`)"

	DBLog(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.Name, m.ContactEmail, m.ContactMobile, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Team to the database.
func (m *Team) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Team to the database, but tries to update
// on unique constraint violations.
func (m *Team) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Team from the database.
func (m *Team) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Team"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM team WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// TeamById retrieves a row from 'team' as a Team.
//
// Generated from primary key.
func TeamById(db DB, id int) (*Team, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Team"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `name`, `contact_email`, `contact_mobile`, `updated_at` " +
		"FROM team " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Team
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// TeamByName retrieves a row from 'team' as a *Team.
//
// Generated from index 'teams_name_uindex' of type 'unique'.
func TeamByName(db DB, name string) (*Team, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Team"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `name`, `contact_email`, `contact_mobile`, `updated_at` " +
		"FROM team " +
		"WHERE `name` = ?"

	DBLog(sqlstr, name)
	var m Team
	if err := db.Get(&m, sqlstr, name); err != nil {
		return nil, err
	}

	return &m, nil
}
