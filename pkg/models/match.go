// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

// Match represents a row from 'match'.
type Match struct {
	Id             int       `db:"id,autoinc,pk"`
	HomePartnersId int       `db:"home_partners_id"`
	AwayPartnersId int       `db:"away_partners_id"`
	MatchDate      time.Time `db:"match_date"`
}

// Insert inserts the Match to the database.
func (m *Match) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Match"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO match (" +
		"`home_partners_id`, `away_partners_id`, `match_date`" +
		") VALUES (" +
		"?, ?, ?" +
		")"

	DBLog(sqlstr, m.HomePartnersId, m.AwayPartnersId, m.MatchDate)
	res, err := db.Exec(sqlstr, m.HomePartnersId, m.AwayPartnersId, m.MatchDate)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyMatchs(db DB, ms ...*Match) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Match"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO match (" +
		"`home_partners_id`,`away_partners_id`,`match_date`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?" +
			"),"
		args = append(args, m.HomePartnersId, m.AwayPartnersId, m.MatchDate)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Match) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Match in the database.
func (m *Match) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Match"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE match " +
		"SET `home_partners_id` = ?, `away_partners_id` = ?, `match_date` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.HomePartnersId, m.AwayPartnersId, m.MatchDate, m.Id)
	res, err := db.Exec(sqlstr, m.HomePartnersId, m.AwayPartnersId, m.MatchDate, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the Match to the database, and tries to update
// on unique constraint violations.
func (m *Match) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Match"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO match (" +
		"`home_partners_id`, `away_partners_id`, `match_date`" +
		") VALUES (" +
		"?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`home_partners_id` = VALUES(`home_partners_id`), `away_partners_id` = VALUES(`away_partners_id`), `match_date` = VALUES(`match_date`)"

	DBLog(sqlstr, m.HomePartnersId, m.AwayPartnersId, m.MatchDate)
	res, err := db.Exec(sqlstr, m.HomePartnersId, m.AwayPartnersId, m.MatchDate)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Match to the database.
func (m *Match) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Match to the database, but tries to update
// on unique constraint violations.
func (m *Match) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Match from the database.
func (m *Match) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Match"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM match WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// MatchById retrieves a row from 'match' as a Match.
//
// Generated from primary key.
func MatchById(db DB, id int) (*Match, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Match"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `home_partners_id`, `away_partners_id`, `match_date` " +
		"FROM match " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Match
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetHomePartnersIdPartnership Gets an instance of Partnership
//
// Generated from constraint matches_partnership_id_fk
func (m *Match) GetHomePartnersIdPartnership(db DB) (*Partnership, error) {
	return PartnershipById(db, m.HomePartnersId)
}

// GetAwayPartnersIdPartnership Gets an instance of Partnership
//
// Generated from constraint matches_partnership_id_fk2
func (m *Match) GetAwayPartnersIdPartnership(db DB) (*Partnership, error) {
	return PartnershipById(db, m.AwayPartnersId)
}
