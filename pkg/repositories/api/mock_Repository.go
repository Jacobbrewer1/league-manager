// Code generated by mockery. DO NOT EDIT.

package api

import (
	models "github.com/Jacobbrewer1/league-manager/pkg/models"
	pagefilter "github.com/Jacobbrewer1/pagefilter"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetPlayers provides a mock function with given fields: details, filters
func (_m *MockRepository) GetPlayers(details pagefilter.PaginatorDetails, filters *GetPlayersFilters) (*pagefilter.PaginatedResponse[models.Player], error) {
	ret := _m.Called(details, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayers")
	}

	var r0 *pagefilter.PaginatedResponse[models.Player]
	var r1 error
	if rf, ok := ret.Get(0).(func(pagefilter.PaginatorDetails, *GetPlayersFilters) (*pagefilter.PaginatedResponse[models.Player], error)); ok {
		return rf(details, filters)
	}
	if rf, ok := ret.Get(0).(func(pagefilter.PaginatorDetails, *GetPlayersFilters) *pagefilter.PaginatedResponse[models.Player]); ok {
		r0 = rf(details, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagefilter.PaginatedResponse[models.Player])
		}
	}

	if rf, ok := ret.Get(1).(func(pagefilter.PaginatorDetails, *GetPlayersFilters) error); ok {
		r1 = rf(details, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
